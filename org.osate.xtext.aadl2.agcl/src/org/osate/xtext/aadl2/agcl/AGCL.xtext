grammar org.osate.xtext.aadl2.agcl.AGCL with org.eclipse.xtext.common.Terminals

// import "http://agcl/1.0" 
generate agcl "http://www.osate.org/xtext/aadl2/agcl/AGCL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2

// This leads to a build-dependency cycle

//import "platform:/resource/org.osate.xtext.aadl2.agcl.analysis/models/verifiers.ecore" as verifiers
//import "http://verifiers/1.0" as verifiers

AGCLGrammarRoot :    
      'library' lib = AGCLAnnexLibrary 
    | 'subclause' subclause = AGCLAnnexSubclause
;

AnnexLibrary returns aadl2::AnnexLibrary:
     AGCLAnnexLibrary
;

AnnexSubclause returns aadl2::AnnexSubclause:
     AGCLAnnexSubclause
//    AGCLTypeSubclause | AGCLImplSubclause
;

AGCLAnnexLibrary returns AGCLAnnexLibrary:
    {AGCLAnnexLibrary}
    ( viewpoints += AGCLViewpoint (viewpoints += AGCLViewpoint)* )?
    ( enforceclauses += AGCLEnforce (enforceclauses += AGCLEnforce)* )?
;

AGCLViewpoint returns AGCLViewpoint:
    'viewpoint' name = ID ';'
;

AGCLEnforce returns AGCLEnforce:
    'enforce' name = ID ';'
;

AGCLAnnexSubclause returns AGCLAnnexSubclause:
    {AGCLAnnexSubclause}
    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
    ( behaviour = AGCLBehaviour )?
    ( contracts += AGCLContract (contracts += AGCLContract)* )?
;

AGCLContract returns AGCLContract:
    'contract' name = ID
        ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
        assumption = AGCLAssumption
        guarantee = AGCLGuarantee
    'end' ename = ID ';'
;

AGCLPropertyDecl returns AGCLPropertyDecl:
    'property' name = ID 
        ( '(' params += Parameter ( "," params += Parameter)* ')' )? '='
            spec=PSLSpec
    ';'
;

AGCLAssumption returns AGCLAssumption:
    'assumption' spec = PSLSpec ';'
;

AGCLGuarantee returns AGCLGuarantee:
    'guarantee' spec = PSLSpec ';'
;

AGCLBehaviour returns AGCLBehaviour:
    ('behaviour' | 'behavior') spec = PSLSpec ';'
;

// This leads to a build-dependency cycle
//PSLSpecification returns verifiers::Specification:
//    PSLSpec
//;

PSLSpec returns PSLSpec:
	'psl'? expr = PSLProperty
;


PSLProperty returns PSLExpression:
	PSLDisjunction (({PSLImplication.left = current} IMPL right = PSLProperty)
				   |({PSLBiconditional.left = current} IFF right = PSLProperty))?
;

PSLDisjunction returns PSLExpression:
	PSLConjunction ({PSLDisjunction.left = current} OR right = PSLConjunction)*
;

PSLConjunction returns PSLExpression:
	PSLLogicFactor ({PSLConjunction.left = current} AND right = PSLLogicFactor)*
;

PSLLogicFactor returns PSLExpression:
	  PSLPrimary
	| PSLNegation
	| PSLTemporal
	| '(' PSLProperty ')'
;

PSLTemporal returns PSLExpression:
	  {PSLNext} NEXT subterm = PSLLogicFactor
	| {PSLEventually} EVENTUALLY subterm = PSLLogicFactor
	| {PSLAlways} ALWAYS subterm = PSLLogicFactor
	| {PSLUntil} '[' left = PSLLogicFactor UNTIL right = PSLLogicFactor ']'
;

PSLNegation returns PSLExpression:
	{PSLNegation} NOT subterm = PSLLogicFactor
;

PSLPrimary returns PSLExpression:
	  BooleanConstant
	| AtomicProposition
;

BooleanConstant:
	val = TRUE | val = FALSE
;

AtomicProposition:
      Var
    | Input
    | Output
;

Var:
    name = ID
;

Input:
    'in' link = ID (':' event = ID)? 
;

Output:
    'out' link = ID (':' event = ID)? 
;


Parameter returns Parameter:
    ID;
    

terminal SL_COMMENT:
    '--' !('\n' | '\r')* ('\r'? '\n')?;

terminal TRUE: 'TRUE' | '1';
terminal FALSE: 'FALSE' | '0';
terminal AND: '&&' | '&' | 'and';
terminal OR: '||' | '|' | 'or';
terminal NOT: '!' | 'not';
terminal IMPL: '->';
terminal IFF: '<->';
terminal NEXT: 'X' | 'next';
terminal EVENTUALLY: 'F' | 'eventually';
terminal ALWAYS: 'G' | 'always';
terminal UNTIL: 'U' | 'until';

 