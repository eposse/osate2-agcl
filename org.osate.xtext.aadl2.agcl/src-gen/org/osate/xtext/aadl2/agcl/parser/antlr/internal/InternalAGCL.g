/*
* generated by Xtext
*/
grammar InternalAGCL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.osate.xtext.aadl2.agcl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.osate.xtext.aadl2.agcl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.aadl2.agcl.services.AGCLGrammarAccess;

}

@parser::members {

 	private AGCLGrammarAccess grammarAccess;
 	
    public InternalAGCLParser(TokenStream input, AGCLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AGCLGrammarRoot";	
   	}
   	
   	@Override
   	protected AGCLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAGCLGrammarRoot
entryRuleAGCLGrammarRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLGrammarRootRule()); }
	 iv_ruleAGCLGrammarRoot=ruleAGCLGrammarRoot 
	 { $current=$iv_ruleAGCLGrammarRoot.current; } 
	 EOF 
;

// Rule AGCLGrammarRoot
ruleAGCLGrammarRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='library' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLGrammarRootAccess().getLibraryKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLGrammarRootAccess().getLibAGCLAnnexLibraryParserRuleCall_0_1_0()); 
	    }
		lv_lib_1_0=ruleAGCLAnnexLibrary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLGrammarRootRule());
	        }
       		set(
       			$current, 
       			"lib",
        		lv_lib_1_0, 
        		"AGCLAnnexLibrary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='subclause' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAGCLGrammarRootAccess().getSubclauseKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLGrammarRootAccess().getSubclauseAGCLAnnexSubclauseParserRuleCall_1_1_0()); 
	    }
		lv_subclause_3_0=ruleAGCLAnnexSubclause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLGrammarRootRule());
	        }
       		set(
       			$current, 
       			"subclause",
        		lv_subclause_3_0, 
        		"AGCLAnnexSubclause");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;









// Entry rule entryRuleAGCLAnnexLibrary
entryRuleAGCLAnnexLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLAnnexLibraryRule()); }
	 iv_ruleAGCLAnnexLibrary=ruleAGCLAnnexLibrary 
	 { $current=$iv_ruleAGCLAnnexLibrary.current; } 
	 EOF 
;

// Rule AGCLAnnexLibrary
ruleAGCLAnnexLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAGCLAnnexLibraryAccess().getAGCLAnnexLibraryAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexLibraryAccess().getViewpointsAGCLViewpointParserRuleCall_1_0_0()); 
	    }
		lv_viewpoints_1_0=ruleAGCLViewpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"viewpoints",
        		lv_viewpoints_1_0, 
        		"AGCLViewpoint");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexLibraryAccess().getViewpointsAGCLViewpointParserRuleCall_1_1_0()); 
	    }
		lv_viewpoints_2_0=ruleAGCLViewpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"viewpoints",
        		lv_viewpoints_2_0, 
        		"AGCLViewpoint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexLibraryAccess().getEnforceclausesAGCLEnforceParserRuleCall_2_0_0()); 
	    }
		lv_enforceclauses_3_0=ruleAGCLEnforce		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"enforceclauses",
        		lv_enforceclauses_3_0, 
        		"AGCLEnforce");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexLibraryAccess().getEnforceclausesAGCLEnforceParserRuleCall_2_1_0()); 
	    }
		lv_enforceclauses_4_0=ruleAGCLEnforce		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"enforceclauses",
        		lv_enforceclauses_4_0, 
        		"AGCLEnforce");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleAGCLViewpoint
entryRuleAGCLViewpoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLViewpointRule()); }
	 iv_ruleAGCLViewpoint=ruleAGCLViewpoint 
	 { $current=$iv_ruleAGCLViewpoint.current; } 
	 EOF 
;

// Rule AGCLViewpoint
ruleAGCLViewpoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='viewpoint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLViewpointAccess().getViewpointKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAGCLViewpointAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAGCLViewpointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAGCLViewpointAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAGCLEnforce
entryRuleAGCLEnforce returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLEnforceRule()); }
	 iv_ruleAGCLEnforce=ruleAGCLEnforce 
	 { $current=$iv_ruleAGCLEnforce.current; } 
	 EOF 
;

// Rule AGCLEnforce
ruleAGCLEnforce returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enforce' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLEnforceAccess().getEnforceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAGCLEnforceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAGCLEnforceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAGCLEnforceAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAGCLAnnexSubclause
entryRuleAGCLAnnexSubclause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLAnnexSubclauseRule()); }
	 iv_ruleAGCLAnnexSubclause=ruleAGCLAnnexSubclause 
	 { $current=$iv_ruleAGCLAnnexSubclause.current; } 
	 EOF 
;

// Rule AGCLAnnexSubclause
ruleAGCLAnnexSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAGCLAnnexSubclauseAccess().getAGCLAnnexSubclauseAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexSubclauseAccess().getDeclarationsAGCLPropertyDeclParserRuleCall_1_0_0()); 
	    }
		lv_declarations_1_0=ruleAGCLPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_1_0, 
        		"AGCLPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexSubclauseAccess().getDeclarationsAGCLPropertyDeclParserRuleCall_1_1_0()); 
	    }
		lv_declarations_2_0=ruleAGCLPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"AGCLPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexSubclauseAccess().getBehaviourAGCLBehaviourParserRuleCall_2_0()); 
	    }
		lv_behaviour_3_0=ruleAGCLBehaviour		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexSubclauseRule());
	        }
       		set(
       			$current, 
       			"behaviour",
        		lv_behaviour_3_0, 
        		"AGCLBehaviour");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexSubclauseAccess().getContractsAGCLContractParserRuleCall_3_0_0()); 
	    }
		lv_contracts_4_0=ruleAGCLContract		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"contracts",
        		lv_contracts_4_0, 
        		"AGCLContract");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAnnexSubclauseAccess().getContractsAGCLContractParserRuleCall_3_1_0()); 
	    }
		lv_contracts_5_0=ruleAGCLContract		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"contracts",
        		lv_contracts_5_0, 
        		"AGCLContract");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleAGCLContract
entryRuleAGCLContract returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLContractRule()); }
	 iv_ruleAGCLContract=ruleAGCLContract 
	 { $current=$iv_ruleAGCLContract.current; } 
	 EOF 
;

// Rule AGCLContract
ruleAGCLContract returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='contract' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLContractAccess().getContractKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAGCLContractAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAGCLContractRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLContractAccess().getDeclarationsAGCLPropertyDeclParserRuleCall_2_0_0()); 
	    }
		lv_declarations_2_0=ruleAGCLPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLContractRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"AGCLPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLContractAccess().getDeclarationsAGCLPropertyDeclParserRuleCall_2_1_0()); 
	    }
		lv_declarations_3_0=ruleAGCLPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLContractRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"AGCLPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLContractAccess().getAssumptionAGCLAssumptionParserRuleCall_3_0()); 
	    }
		lv_assumption_4_0=ruleAGCLAssumption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLContractRule());
	        }
       		set(
       			$current, 
       			"assumption",
        		lv_assumption_4_0, 
        		"AGCLAssumption");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLContractAccess().getGuaranteeAGCLGuaranteeParserRuleCall_4_0()); 
	    }
		lv_guarantee_5_0=ruleAGCLGuarantee		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLContractRule());
	        }
       		set(
       			$current, 
       			"guarantee",
        		lv_guarantee_5_0, 
        		"AGCLGuarantee");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='end' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAGCLContractAccess().getEndKeyword_5());
    }
(
(
		lv_ename_7_0=RULE_ID
		{
			newLeafNode(lv_ename_7_0, grammarAccess.getAGCLContractAccess().getEnameIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAGCLContractRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ename",
        		lv_ename_7_0, 
        		"ID");
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAGCLContractAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleAGCLPropertyDecl
entryRuleAGCLPropertyDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLPropertyDeclRule()); }
	 iv_ruleAGCLPropertyDecl=ruleAGCLPropertyDecl 
	 { $current=$iv_ruleAGCLPropertyDecl.current; } 
	 EOF 
;

// Rule AGCLPropertyDecl
ruleAGCLPropertyDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='property' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLPropertyDeclAccess().getPropertyKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAGCLPropertyDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAGCLPropertyDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAGCLPropertyDeclAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLPropertyDeclAccess().getParamsParameterParserRuleCall_2_1_0()); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLPropertyDeclRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAGCLPropertyDeclAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLPropertyDeclAccess().getParamsParameterParserRuleCall_2_2_1_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLPropertyDeclRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAGCLPropertyDeclAccess().getRightParenthesisKeyword_2_3());
    }
)?	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAGCLPropertyDeclAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLPropertyDeclAccess().getSpecPSLSpecParserRuleCall_4_0()); 
	    }
		lv_spec_8_0=rulePSLSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLPropertyDeclRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_8_0, 
        		"PSLSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAGCLPropertyDeclAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleAGCLAssumption
entryRuleAGCLAssumption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLAssumptionRule()); }
	 iv_ruleAGCLAssumption=ruleAGCLAssumption 
	 { $current=$iv_ruleAGCLAssumption.current; } 
	 EOF 
;

// Rule AGCLAssumption
ruleAGCLAssumption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assumption' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLAssumptionAccess().getAssumptionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLAssumptionAccess().getSpecPSLSpecParserRuleCall_1_0()); 
	    }
		lv_spec_1_0=rulePSLSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLAssumptionRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_1_0, 
        		"PSLSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAGCLAssumptionAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAGCLGuarantee
entryRuleAGCLGuarantee returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLGuaranteeRule()); }
	 iv_ruleAGCLGuarantee=ruleAGCLGuarantee 
	 { $current=$iv_ruleAGCLGuarantee.current; } 
	 EOF 
;

// Rule AGCLGuarantee
ruleAGCLGuarantee returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='guarantee' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLGuaranteeAccess().getGuaranteeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLGuaranteeAccess().getSpecPSLSpecParserRuleCall_1_0()); 
	    }
		lv_spec_1_0=rulePSLSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLGuaranteeRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_1_0, 
        		"PSLSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAGCLGuaranteeAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAGCLBehaviour
entryRuleAGCLBehaviour returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGCLBehaviourRule()); }
	 iv_ruleAGCLBehaviour=ruleAGCLBehaviour 
	 { $current=$iv_ruleAGCLBehaviour.current; } 
	 EOF 
;

// Rule AGCLBehaviour
ruleAGCLBehaviour returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='behaviour' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGCLBehaviourAccess().getBehaviourKeyword_0_0());
    }

    |	otherlv_1='behavior' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAGCLBehaviourAccess().getBehaviorKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGCLBehaviourAccess().getSpecPSLSpecParserRuleCall_1_0()); 
	    }
		lv_spec_2_0=rulePSLSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGCLBehaviourRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_2_0, 
        		"PSLSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAGCLBehaviourAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRulePSLSpec
entryRulePSLSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLSpecRule()); }
	 iv_rulePSLSpec=rulePSLSpec 
	 { $current=$iv_rulePSLSpec.current; } 
	 EOF 
;

// Rule PSLSpec
rulePSLSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='psl' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPSLSpecAccess().getPslKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPSLSpecAccess().getExprPSLExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=rulePSLExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLSpecRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"PSLExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePSLExpression
entryRulePSLExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLExpressionRule()); }
	 iv_rulePSLExpression=rulePSLExpression 
	 { $current=$iv_rulePSLExpression.current; } 
	 EOF 
;

// Rule PSLExpression
rulePSLExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPSLExpressionAccess().getConditionPSLBooleanExpressionParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=rulePSLBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"PSLBooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		lv_implication_1_0=RULE_IMPL
		{
			newLeafNode(lv_implication_1_0, grammarAccess.getPSLExpressionAccess().getImplicationIMPLTerminalRuleCall_1_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPSLExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"implication",
        		true, 
        		"IMPL");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPSLExpressionAccess().getConclusionPSLBooleanExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_conclusion_2_0=rulePSLBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLExpressionRule());
	        }
       		set(
       			$current, 
       			"conclusion",
        		lv_conclusion_2_0, 
        		"PSLBooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_biconditional_3_0=RULE_IFF
		{
			newLeafNode(lv_biconditional_3_0, grammarAccess.getPSLExpressionAccess().getBiconditionalIFFTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPSLExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"biconditional",
        		true, 
        		"IFF");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPSLExpressionAccess().getOtherPSLBooleanExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_other_4_0=rulePSLBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLExpressionRule());
	        }
       		set(
       			$current, 
       			"other",
        		lv_other_4_0, 
        		"PSLBooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRulePSLBooleanExpression
entryRulePSLBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLBooleanExpressionRule()); }
	 iv_rulePSLBooleanExpression=rulePSLBooleanExpression 
	 { $current=$iv_rulePSLBooleanExpression.current; } 
	 EOF 
;

// Rule PSLBooleanExpression
rulePSLBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPSLBooleanExpressionAccess().getPSLDisjunctionParserRuleCall()); 
    }
    this_PSLDisjunction_0=rulePSLDisjunction
    { 
        $current = $this_PSLDisjunction_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBooleanConstant
entryRuleBooleanConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanConstantRule()); }
	 iv_ruleBooleanConstant=ruleBooleanConstant 
	 { $current=$iv_ruleBooleanConstant.current; } 
	 EOF 
;

// Rule BooleanConstant
ruleBooleanConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_0_0(),
            $current);
    }
)(
(
		lv_val_1_0=RULE_TRUE
		{
			newLeafNode(lv_val_1_0, grammarAccess.getBooleanConstantAccess().getValTRUETerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"TRUE");
	    }

)
))
    |(
(
		lv_val_2_0=RULE_FALSE
		{
			newLeafNode(lv_val_2_0, grammarAccess.getBooleanConstantAccess().getValFALSETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_2_0, 
        		"FALSE");
	    }

)
))
;





// Entry rule entryRuleAtomicProp
entryRuleAtomicProp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicPropRule()); }
	 iv_ruleAtomicProp=ruleAtomicProp 
	 { $current=$iv_ruleAtomicProp.current; } 
	 EOF 
;

// Rule AtomicProp
ruleAtomicProp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtomicPropAccess().getVarParserRuleCall_0()); 
    }
    this_Var_0=ruleVar
    { 
        $current = $this_Var_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomicPropAccess().getInputParserRuleCall_1()); 
    }
    this_Input_1=ruleInput
    { 
        $current = $this_Input_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomicPropAccess().getOutputParserRuleCall_2()); 
    }
    this_Output_2=ruleOutput
    { 
        $current = $this_Output_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current; } 
	 EOF 
;

// Rule Var
ruleVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='in' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInputAccess().getInKeyword_0());
    }
(
(
		lv_link_1_0=RULE_ID
		{
			newLeafNode(lv_link_1_0, grammarAccess.getInputAccess().getLinkIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"link",
        		lv_link_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInputAccess().getColonKeyword_2_0());
    }
(
(
		lv_event_3_0=RULE_ID
		{
			newLeafNode(lv_event_3_0, grammarAccess.getInputAccess().getEventIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"event",
        		lv_event_3_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='out' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutKeyword_0());
    }
(
(
		lv_link_1_0=RULE_ID
		{
			newLeafNode(lv_link_1_0, grammarAccess.getOutputAccess().getLinkIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"link",
        		lv_link_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutputAccess().getColonKeyword_2_0());
    }
(
(
		lv_event_3_0=RULE_ID
		{
			newLeafNode(lv_event_3_0, grammarAccess.getOutputAccess().getEventIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"event",
        		lv_event_3_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRulePSLDisjunction
entryRulePSLDisjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLDisjunctionRule()); }
	 iv_rulePSLDisjunction=rulePSLDisjunction 
	 { $current=$iv_rulePSLDisjunction.current; } 
	 EOF 
;

// Rule PSLDisjunction
rulePSLDisjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPSLDisjunctionAccess().getTermsPSLConjunctionParserRuleCall_0_0()); 
	    }
		lv_terms_0_0=rulePSLConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLDisjunctionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_0_0, 
        		"PSLConjunction");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_OR_1=RULE_OR
    { 
    newLeafNode(this_OR_1, grammarAccess.getPSLDisjunctionAccess().getORTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPSLDisjunctionAccess().getTermsPSLConjunctionParserRuleCall_1_1_0()); 
	    }
		lv_terms_2_0=rulePSLConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLDisjunctionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_2_0, 
        		"PSLConjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePSLConjunction
entryRulePSLConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLConjunctionRule()); }
	 iv_rulePSLConjunction=rulePSLConjunction 
	 { $current=$iv_rulePSLConjunction.current; } 
	 EOF 
;

// Rule PSLConjunction
rulePSLConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPSLConjunctionAccess().getFactorsPSLAtomParserRuleCall_0_0()); 
	    }
		lv_factors_0_0=rulePSLAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLConjunctionRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_0_0, 
        		"PSLAtom");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_AND_1=RULE_AND
    { 
    newLeafNode(this_AND_1, grammarAccess.getPSLConjunctionAccess().getANDTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPSLConjunctionAccess().getFactorsPSLAtomParserRuleCall_1_1_0()); 
	    }
		lv_factors_2_0=rulePSLAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLConjunctionRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_2_0, 
        		"PSLAtom");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePSLAtom
entryRulePSLAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLAtomRule()); }
	 iv_rulePSLAtom=rulePSLAtom 
	 { $current=$iv_rulePSLAtom.current; } 
	 EOF 
;

// Rule PSLAtom
rulePSLAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPSLAtomAccess().getBooleanConstantParserRuleCall_0()); 
    }
    this_BooleanConstant_0=ruleBooleanConstant
    { 
        $current = $this_BooleanConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPSLAtomAccess().getAtomicPropParserRuleCall_1()); 
    }
    this_AtomicProp_1=ruleAtomicProp
    { 
        $current = $this_AtomicProp_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPSLAtomAccess().getPSLNegationParserRuleCall_2()); 
    }
    this_PSLNegation_2=rulePSLNegation
    { 
        $current = $this_PSLNegation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPSLAtomAccess().getLeftParenthesisKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getPSLAtomAccess().getPSLBooleanExpressionParserRuleCall_3_1()); 
    }
    this_PSLBooleanExpression_4=rulePSLBooleanExpression
    { 
        $current = $this_PSLBooleanExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPSLAtomAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRulePSLNegation
entryRulePSLNegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPSLNegationRule()); }
	 iv_rulePSLNegation=rulePSLNegation 
	 { $current=$iv_rulePSLNegation.current; } 
	 EOF 
;

// Rule PSLNegation
rulePSLNegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NOT_0=RULE_NOT
    { 
    newLeafNode(this_NOT_0, grammarAccess.getPSLNegationAccess().getNOTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPSLNegationAccess().getNegatedPSLBooleanExpressionParserRuleCall_1_0()); 
	    }
		lv_negated_1_0=rulePSLBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPSLNegationRule());
	        }
       		set(
       			$current, 
       			"negated",
        		lv_negated_1_0, 
        		"PSLBooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getParameterAccess().getIDTerminalRuleCall()); 
    }

;







RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_TRUE : ('T'|'true'|'1');

RULE_FALSE : ('F'|'false'|'0');

RULE_AND : ('&&'|'&'|'and');

RULE_OR : ('||'|'|'|'or');

RULE_NOT : ('!'|'not');

RULE_IMPL : '->';

RULE_IFF : '<->';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


