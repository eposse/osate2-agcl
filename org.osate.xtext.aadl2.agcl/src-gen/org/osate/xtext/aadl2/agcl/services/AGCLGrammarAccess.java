/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.agcl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AGCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AGCLGrammarRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLGrammarRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLibraryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLibAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLibAGCLAnnexLibraryParserRuleCall_0_1_0 = (RuleCall)cLibAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSubclauseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubclauseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubclauseAGCLAnnexSubclauseParserRuleCall_1_1_0 = (RuleCall)cSubclauseAssignment_1_1.eContents().get(0);
		
		//// This leads to a build-dependency cycle
		////import "platform:/resource/org.osate.xtext.aadl2.agcl.analysis/models/verifiers.ecore" as verifiers
		////import "http://verifiers/1.0" as verifiers
		//AGCLGrammarRoot:
		//	"library" lib=AGCLAnnexLibrary | "subclause" subclause=AGCLAnnexSubclause;
		public ParserRule getRule() { return rule; }

		//"library" lib=AGCLAnnexLibrary | "subclause" subclause=AGCLAnnexSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//"library" lib=AGCLAnnexLibrary
		public Group getGroup_0() { return cGroup_0; }

		//"library"
		public Keyword getLibraryKeyword_0_0() { return cLibraryKeyword_0_0; }

		//lib=AGCLAnnexLibrary
		public Assignment getLibAssignment_0_1() { return cLibAssignment_0_1; }

		//AGCLAnnexLibrary
		public RuleCall getLibAGCLAnnexLibraryParserRuleCall_0_1_0() { return cLibAGCLAnnexLibraryParserRuleCall_0_1_0; }

		//"subclause" subclause=AGCLAnnexSubclause
		public Group getGroup_1() { return cGroup_1; }

		//"subclause"
		public Keyword getSubclauseKeyword_1_0() { return cSubclauseKeyword_1_0; }

		//subclause=AGCLAnnexSubclause
		public Assignment getSubclauseAssignment_1_1() { return cSubclauseAssignment_1_1; }

		//AGCLAnnexSubclause
		public RuleCall getSubclauseAGCLAnnexSubclauseParserRuleCall_1_1_0() { return cSubclauseAGCLAnnexSubclauseParserRuleCall_1_1_0; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cAGCLAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	AGCLAnnexLibrary;
		public ParserRule getRule() { return rule; }

		//AGCLAnnexLibrary
		public RuleCall getAGCLAnnexLibraryParserRuleCall() { return cAGCLAnnexLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cAGCLAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////    AGCLTypeSubclause | AGCLImplSubclause
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	AGCLAnnexSubclause;
		public ParserRule getRule() { return rule; }

		//AGCLAnnexSubclause
		public RuleCall getAGCLAnnexSubclauseParserRuleCall() { return cAGCLAnnexSubclauseParserRuleCall; }
	}

	public class AGCLAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAGCLAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cViewpointsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cViewpointsAGCLViewpointParserRuleCall_1_0_0 = (RuleCall)cViewpointsAssignment_1_0.eContents().get(0);
		private final Assignment cViewpointsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cViewpointsAGCLViewpointParserRuleCall_1_1_0 = (RuleCall)cViewpointsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnforceclausesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnforceclausesAGCLEnforceParserRuleCall_2_0_0 = (RuleCall)cEnforceclausesAssignment_2_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnforceclausesAGCLEnforceParserRuleCall_2_1_0 = (RuleCall)cEnforceclausesAssignment_2_1.eContents().get(0);
		
		//AGCLAnnexLibrary:
		//	{AGCLAnnexLibrary} (viewpoints+=AGCLViewpoint viewpoints+=AGCLViewpoint*)? (enforceclauses+=AGCLEnforce
		//	enforceclauses+=AGCLEnforce*)?;
		public ParserRule getRule() { return rule; }

		//{AGCLAnnexLibrary} (viewpoints+=AGCLViewpoint viewpoints+=AGCLViewpoint*)? (enforceclauses+=AGCLEnforce
		//enforceclauses+=AGCLEnforce*)?
		public Group getGroup() { return cGroup; }

		//{AGCLAnnexLibrary}
		public Action getAGCLAnnexLibraryAction_0() { return cAGCLAnnexLibraryAction_0; }

		//(viewpoints+=AGCLViewpoint viewpoints+=AGCLViewpoint*)?
		public Group getGroup_1() { return cGroup_1; }

		//viewpoints+=AGCLViewpoint
		public Assignment getViewpointsAssignment_1_0() { return cViewpointsAssignment_1_0; }

		//AGCLViewpoint
		public RuleCall getViewpointsAGCLViewpointParserRuleCall_1_0_0() { return cViewpointsAGCLViewpointParserRuleCall_1_0_0; }

		//viewpoints+=AGCLViewpoint*
		public Assignment getViewpointsAssignment_1_1() { return cViewpointsAssignment_1_1; }

		//AGCLViewpoint
		public RuleCall getViewpointsAGCLViewpointParserRuleCall_1_1_0() { return cViewpointsAGCLViewpointParserRuleCall_1_1_0; }

		//(enforceclauses+=AGCLEnforce enforceclauses+=AGCLEnforce*)?
		public Group getGroup_2() { return cGroup_2; }

		//enforceclauses+=AGCLEnforce
		public Assignment getEnforceclausesAssignment_2_0() { return cEnforceclausesAssignment_2_0; }

		//AGCLEnforce
		public RuleCall getEnforceclausesAGCLEnforceParserRuleCall_2_0_0() { return cEnforceclausesAGCLEnforceParserRuleCall_2_0_0; }

		//enforceclauses+=AGCLEnforce*
		public Assignment getEnforceclausesAssignment_2_1() { return cEnforceclausesAssignment_2_1; }

		//AGCLEnforce
		public RuleCall getEnforceclausesAGCLEnforceParserRuleCall_2_1_0() { return cEnforceclausesAGCLEnforceParserRuleCall_2_1_0; }
	}

	public class AGCLViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AGCLViewpoint:
		//	"viewpoint" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"viewpoint" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"viewpoint"
		public Keyword getViewpointKeyword_0() { return cViewpointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AGCLEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AGCLEnforce:
		//	"enforce" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"enforce" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AGCLAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAGCLAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclarationsAGCLPropertyDeclParserRuleCall_1_0_0 = (RuleCall)cDeclarationsAssignment_1_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclarationsAGCLPropertyDeclParserRuleCall_1_1_0 = (RuleCall)cDeclarationsAssignment_1_1.eContents().get(0);
		private final Assignment cBehaviourAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBehaviourAGCLBehaviourParserRuleCall_2_0 = (RuleCall)cBehaviourAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cContractsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cContractsAGCLContractParserRuleCall_3_0_0 = (RuleCall)cContractsAssignment_3_0.eContents().get(0);
		private final Assignment cContractsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContractsAGCLContractParserRuleCall_3_1_0 = (RuleCall)cContractsAssignment_3_1.eContents().get(0);
		
		//AGCLAnnexSubclause:
		//	{AGCLAnnexSubclause} (declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)? behaviour=AGCLBehaviour?
		//	(contracts+=AGCLContract contracts+=AGCLContract*)?;
		public ParserRule getRule() { return rule; }

		//{AGCLAnnexSubclause} (declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)? behaviour=AGCLBehaviour?
		//(contracts+=AGCLContract contracts+=AGCLContract*)?
		public Group getGroup() { return cGroup; }

		//{AGCLAnnexSubclause}
		public Action getAGCLAnnexSubclauseAction_0() { return cAGCLAnnexSubclauseAction_0; }

		//(declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)?
		public Group getGroup_1() { return cGroup_1; }

		//declarations+=AGCLPropertyDecl
		public Assignment getDeclarationsAssignment_1_0() { return cDeclarationsAssignment_1_0; }

		//AGCLPropertyDecl
		public RuleCall getDeclarationsAGCLPropertyDeclParserRuleCall_1_0_0() { return cDeclarationsAGCLPropertyDeclParserRuleCall_1_0_0; }

		//declarations+=AGCLPropertyDecl*
		public Assignment getDeclarationsAssignment_1_1() { return cDeclarationsAssignment_1_1; }

		//AGCLPropertyDecl
		public RuleCall getDeclarationsAGCLPropertyDeclParserRuleCall_1_1_0() { return cDeclarationsAGCLPropertyDeclParserRuleCall_1_1_0; }

		//behaviour=AGCLBehaviour?
		public Assignment getBehaviourAssignment_2() { return cBehaviourAssignment_2; }

		//AGCLBehaviour
		public RuleCall getBehaviourAGCLBehaviourParserRuleCall_2_0() { return cBehaviourAGCLBehaviourParserRuleCall_2_0; }

		//(contracts+=AGCLContract contracts+=AGCLContract*)?
		public Group getGroup_3() { return cGroup_3; }

		//contracts+=AGCLContract
		public Assignment getContractsAssignment_3_0() { return cContractsAssignment_3_0; }

		//AGCLContract
		public RuleCall getContractsAGCLContractParserRuleCall_3_0_0() { return cContractsAGCLContractParserRuleCall_3_0_0; }

		//contracts+=AGCLContract*
		public Assignment getContractsAssignment_3_1() { return cContractsAssignment_3_1; }

		//AGCLContract
		public RuleCall getContractsAGCLContractParserRuleCall_3_1_0() { return cContractsAGCLContractParserRuleCall_3_1_0; }
	}

	public class AGCLContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDeclarationsAGCLPropertyDeclParserRuleCall_2_0_0 = (RuleCall)cDeclarationsAssignment_2_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclarationsAGCLPropertyDeclParserRuleCall_2_1_0 = (RuleCall)cDeclarationsAssignment_2_1.eContents().get(0);
		private final Assignment cAssumptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssumptionAGCLAssumptionParserRuleCall_3_0 = (RuleCall)cAssumptionAssignment_3.eContents().get(0);
		private final Assignment cGuaranteeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuaranteeAGCLGuaranteeParserRuleCall_4_0 = (RuleCall)cGuaranteeAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEnameIDTerminalRuleCall_6_0 = (RuleCall)cEnameAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////AGCLAnnexSubclause returns AGCLAnnexSubclause:
		////    AGCLTypeSubclause | AGCLImplSubclause
		////;
		////AGCLAnnexSubclause returns AGCLAnnexSubclause:
		////    {AGCLAnnexSubclause}
		////    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
		////    ( contracts += AGCLContract (contracts += AGCLContract)* )?
		////;
		////AGCLTypeSubclause returns AGCLTypeSubclause:
		////    {AGCLTypeSubclause}
		////    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
		////    ( contracts += AGCLContract (contracts += AGCLContract)* )?
		////;
		////
		////AGCLImplSubclause returns AGCLImplSubclause:
		////    {AGCLImplSubclause}
		////    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
		////    ( behaviour = AGCLBehaviour )?
		////    ( contracts += AGCLContract (contracts += AGCLContract)* )?
		////;
		//AGCLContract:
		//	"contract" name=ID (declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)? assumption=AGCLAssumption
		//	guarantee=AGCLGuarantee "end" ename=ID ";";
		public ParserRule getRule() { return rule; }

		//"contract" name=ID (declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)? assumption=AGCLAssumption
		//guarantee=AGCLGuarantee "end" ename=ID ";"
		public Group getGroup() { return cGroup; }

		//"contract"
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)?
		public Group getGroup_2() { return cGroup_2; }

		//declarations+=AGCLPropertyDecl
		public Assignment getDeclarationsAssignment_2_0() { return cDeclarationsAssignment_2_0; }

		//AGCLPropertyDecl
		public RuleCall getDeclarationsAGCLPropertyDeclParserRuleCall_2_0_0() { return cDeclarationsAGCLPropertyDeclParserRuleCall_2_0_0; }

		//declarations+=AGCLPropertyDecl*
		public Assignment getDeclarationsAssignment_2_1() { return cDeclarationsAssignment_2_1; }

		//AGCLPropertyDecl
		public RuleCall getDeclarationsAGCLPropertyDeclParserRuleCall_2_1_0() { return cDeclarationsAGCLPropertyDeclParserRuleCall_2_1_0; }

		//assumption=AGCLAssumption
		public Assignment getAssumptionAssignment_3() { return cAssumptionAssignment_3; }

		//AGCLAssumption
		public RuleCall getAssumptionAGCLAssumptionParserRuleCall_3_0() { return cAssumptionAGCLAssumptionParserRuleCall_3_0; }

		//guarantee=AGCLGuarantee
		public Assignment getGuaranteeAssignment_4() { return cGuaranteeAssignment_4; }

		//AGCLGuarantee
		public RuleCall getGuaranteeAGCLGuaranteeParserRuleCall_4_0() { return cGuaranteeAGCLGuaranteeParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//ename=ID
		public Assignment getEnameAssignment_6() { return cEnameAssignment_6; }

		//ID
		public RuleCall getEnameIDTerminalRuleCall_6_0() { return cEnameIDTerminalRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class AGCLPropertyDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLPropertyDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecPSLSpecParserRuleCall_4_0 = (RuleCall)cSpecAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AGCLPropertyDecl:
		//	"property" name=ID ("(" params+=Parameter ("," params+=Parameter)* ")")? "=" spec=PSLSpec ";";
		public ParserRule getRule() { return rule; }

		//"property" name=ID ("(" params+=Parameter ("," params+=Parameter)* ")")? "=" spec=PSLSpec ";"
		public Group getGroup() { return cGroup; }

		//"property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" params+=Parameter ("," params+=Parameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_1_0() { return cParamsParameterParserRuleCall_2_1_0; }

		//("," params+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_0() { return cParamsParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//spec=PSLSpec
		public Assignment getSpecAssignment_4() { return cSpecAssignment_4; }

		//PSLSpec
		public RuleCall getSpecPSLSpecParserRuleCall_4_0() { return cSpecPSLSpecParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class AGCLAssumptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLAssumption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssumptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecPSLSpecParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AGCLAssumption:
		//	"assumption" spec=PSLSpec ";";
		public ParserRule getRule() { return rule; }

		//"assumption" spec=PSLSpec ";"
		public Group getGroup() { return cGroup; }

		//"assumption"
		public Keyword getAssumptionKeyword_0() { return cAssumptionKeyword_0; }

		//spec=PSLSpec
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }

		//PSLSpec
		public RuleCall getSpecPSLSpecParserRuleCall_1_0() { return cSpecPSLSpecParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AGCLGuaranteeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLGuarantee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuaranteeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecPSLSpecParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AGCLGuarantee:
		//	"guarantee" spec=PSLSpec ";";
		public ParserRule getRule() { return rule; }

		//"guarantee" spec=PSLSpec ";"
		public Group getGroup() { return cGroup; }

		//"guarantee"
		public Keyword getGuaranteeKeyword_0() { return cGuaranteeKeyword_0; }

		//spec=PSLSpec
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }

		//PSLSpec
		public RuleCall getSpecPSLSpecParserRuleCall_1_0() { return cSpecPSLSpecParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AGCLBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AGCLBehaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBehaviourKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBehaviorKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecPSLSpecParserRuleCall_1_0 = (RuleCall)cSpecAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AGCLBehaviour:
		//	("behaviour" | "behavior") spec=PSLSpec ";";
		public ParserRule getRule() { return rule; }

		//("behaviour" | "behavior") spec=PSLSpec ";"
		public Group getGroup() { return cGroup; }

		//"behaviour" | "behavior"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"behaviour"
		public Keyword getBehaviourKeyword_0_0() { return cBehaviourKeyword_0_0; }

		//"behavior"
		public Keyword getBehaviorKeyword_0_1() { return cBehaviorKeyword_0_1; }

		//spec=PSLSpec
		public Assignment getSpecAssignment_1() { return cSpecAssignment_1; }

		//PSLSpec
		public RuleCall getSpecPSLSpecParserRuleCall_1_0() { return cSpecPSLSpecParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PSLSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPslKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormulaPSLFormulaParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		
		//// This leads to a build-dependency cycle
		////PSLSpecification returns verifiers::Specification:
		////    PSLSpec
		////;
		//PSLSpec:
		//	"psl"? formula=PSLFormula;
		public ParserRule getRule() { return rule; }

		//"psl"? formula=PSLFormula
		public Group getGroup() { return cGroup; }

		//"psl"?
		public Keyword getPslKeyword_0() { return cPslKeyword_0; }

		//formula=PSLFormula
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }

		//PSLFormula
		public RuleCall getFormulaPSLFormulaParserRuleCall_1_0() { return cFormulaPSLFormulaParserRuleCall_1_0; }
	}

	public class PSLFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLFormula");
		private final RuleCall cPSLBooleanExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PSLFormula:
		//	PSLBooleanExpression;
		public ParserRule getRule() { return rule; }

		//PSLBooleanExpression
		public RuleCall getPSLBooleanExpressionParserRuleCall() { return cPSLBooleanExpressionParserRuleCall; }
	}

	public class PSLBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLBooleanExpression");
		private final RuleCall cPSLDisjunctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PSLBooleanExpression:
		//	PSLDisjunction;
		public ParserRule getRule() { return rule; }

		//PSLDisjunction
		public RuleCall getPSLDisjunctionParserRuleCall() { return cPSLDisjunctionParserRuleCall; }
	}

	public class BooleanConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValTRUETerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValFALSETerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//BooleanConstant:
		//	{BooleanConstant} val=TRUE | val=FALSE;
		public ParserRule getRule() { return rule; }

		//{BooleanConstant} val=TRUE | val=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanConstant} val=TRUE
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanConstant}
		public Action getBooleanConstantAction_0_0() { return cBooleanConstantAction_0_0; }

		//val=TRUE
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }

		//TRUE
		public RuleCall getValTRUETerminalRuleCall_0_1_0() { return cValTRUETerminalRuleCall_0_1_0; }

		//val=FALSE
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//FALSE
		public RuleCall getValFALSETerminalRuleCall_1_0() { return cValFALSETerminalRuleCall_1_0; }
	}

	public class AtomicPropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicProp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AtomicProp:
		//	Var | Input | Output;
		public ParserRule getRule() { return rule; }

		//Var | Input | Output
		public Alternatives getAlternatives() { return cAlternatives; }

		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }

		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }

		//Output
		public RuleCall getOutputParserRuleCall_2() { return cOutputParserRuleCall_2; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkIDTerminalRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEventIDTerminalRuleCall_2_1_0 = (RuleCall)cEventAssignment_2_1.eContents().get(0);
		
		//Input:
		//	"in" link=ID (":" event=ID)?;
		public ParserRule getRule() { return rule; }

		//"in" link=ID (":" event=ID)?
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//link=ID
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//ID
		public RuleCall getLinkIDTerminalRuleCall_1_0() { return cLinkIDTerminalRuleCall_1_0; }

		//(":" event=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//event=ID
		public Assignment getEventAssignment_2_1() { return cEventAssignment_2_1; }

		//ID
		public RuleCall getEventIDTerminalRuleCall_2_1_0() { return cEventIDTerminalRuleCall_2_1_0; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkIDTerminalRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEventIDTerminalRuleCall_2_1_0 = (RuleCall)cEventAssignment_2_1.eContents().get(0);
		
		//Output:
		//	"out" link=ID (":" event=ID)?;
		public ParserRule getRule() { return rule; }

		//"out" link=ID (":" event=ID)?
		public Group getGroup() { return cGroup; }

		//"out"
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }

		//link=ID
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//ID
		public RuleCall getLinkIDTerminalRuleCall_1_0() { return cLinkIDTerminalRuleCall_1_0; }

		//(":" event=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//event=ID
		public Assignment getEventAssignment_2_1() { return cEventAssignment_2_1; }

		//ID
		public RuleCall getEventIDTerminalRuleCall_2_1_0() { return cEventIDTerminalRuleCall_2_1_0; }
	}

	public class PSLDisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLDisjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermsPSLConjunctionParserRuleCall_0_0 = (RuleCall)cTermsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTermsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTermsPSLConjunctionParserRuleCall_1_1_0 = (RuleCall)cTermsAssignment_1_1.eContents().get(0);
		
		//PSLDisjunction:
		//	terms+=PSLConjunction (OR terms+=PSLConjunction)*;
		public ParserRule getRule() { return rule; }

		//terms+=PSLConjunction (OR terms+=PSLConjunction)*
		public Group getGroup() { return cGroup; }

		//terms+=PSLConjunction
		public Assignment getTermsAssignment_0() { return cTermsAssignment_0; }

		//PSLConjunction
		public RuleCall getTermsPSLConjunctionParserRuleCall_0_0() { return cTermsPSLConjunctionParserRuleCall_0_0; }

		//(OR terms+=PSLConjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//OR
		public RuleCall getORTerminalRuleCall_1_0() { return cORTerminalRuleCall_1_0; }

		//terms+=PSLConjunction
		public Assignment getTermsAssignment_1_1() { return cTermsAssignment_1_1; }

		//PSLConjunction
		public RuleCall getTermsPSLConjunctionParserRuleCall_1_1_0() { return cTermsPSLConjunctionParserRuleCall_1_1_0; }
	}

	public class PSLConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorsPSLAtomParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cANDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsPSLAtomParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		
		//PSLConjunction:
		//	factors+=PSLAtom (AND factors+=PSLAtom)*;
		public ParserRule getRule() { return rule; }

		//factors+=PSLAtom (AND factors+=PSLAtom)*
		public Group getGroup() { return cGroup; }

		//factors+=PSLAtom
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }

		//PSLAtom
		public RuleCall getFactorsPSLAtomParserRuleCall_0_0() { return cFactorsPSLAtomParserRuleCall_0_0; }

		//(AND factors+=PSLAtom)*
		public Group getGroup_1() { return cGroup_1; }

		//AND
		public RuleCall getANDTerminalRuleCall_1_0() { return cANDTerminalRuleCall_1_0; }

		//factors+=PSLAtom
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }

		//PSLAtom
		public RuleCall getFactorsPSLAtomParserRuleCall_1_1_0() { return cFactorsPSLAtomParserRuleCall_1_1_0; }
	}

	public class PSLAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLAtom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicPropParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPSLNegationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cPSLBooleanExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PSLAtom:
		//	BooleanConstant | AtomicProp | PSLNegation | "(" PSLBooleanExpression ")";
		public ParserRule getRule() { return rule; }

		//BooleanConstant | AtomicProp | PSLNegation | "(" PSLBooleanExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanConstant
		public RuleCall getBooleanConstantParserRuleCall_0() { return cBooleanConstantParserRuleCall_0; }

		//AtomicProp
		public RuleCall getAtomicPropParserRuleCall_1() { return cAtomicPropParserRuleCall_1; }

		//PSLNegation
		public RuleCall getPSLNegationParserRuleCall_2() { return cPSLNegationParserRuleCall_2; }

		//"(" PSLBooleanExpression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//PSLBooleanExpression
		public RuleCall getPSLBooleanExpressionParserRuleCall_3_1() { return cPSLBooleanExpressionParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class PSLNegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PSLNegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNOTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPSLBooleanExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//PSLNegation:
		//	NOT PSLBooleanExpression;
		public ParserRule getRule() { return rule; }

		//NOT PSLBooleanExpression
		public Group getGroup() { return cGroup; }

		//NOT
		public RuleCall getNOTTerminalRuleCall_0() { return cNOTTerminalRuleCall_0; }

		//PSLBooleanExpression
		public RuleCall getPSLBooleanExpressionParserRuleCall_1() { return cPSLBooleanExpressionParserRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Parameter:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private AGCLGrammarRootElements pAGCLGrammarRoot;
	private AnnexLibraryElements pAnnexLibrary;
	private AnnexSubclauseElements pAnnexSubclause;
	private AGCLAnnexLibraryElements pAGCLAnnexLibrary;
	private AGCLViewpointElements pAGCLViewpoint;
	private AGCLEnforceElements pAGCLEnforce;
	private AGCLAnnexSubclauseElements pAGCLAnnexSubclause;
	private AGCLContractElements pAGCLContract;
	private AGCLPropertyDeclElements pAGCLPropertyDecl;
	private AGCLAssumptionElements pAGCLAssumption;
	private AGCLGuaranteeElements pAGCLGuarantee;
	private AGCLBehaviourElements pAGCLBehaviour;
	private PSLSpecElements pPSLSpec;
	private PSLFormulaElements pPSLFormula;
	private PSLBooleanExpressionElements pPSLBooleanExpression;
	private BooleanConstantElements pBooleanConstant;
	private AtomicPropElements pAtomicProp;
	private VarElements pVar;
	private InputElements pInput;
	private OutputElements pOutput;
	private PSLDisjunctionElements pPSLDisjunction;
	private PSLConjunctionElements pPSLConjunction;
	private PSLAtomElements pPSLAtom;
	private PSLNegationElements pPSLNegation;
	private ParameterElements pParameter;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tTRUE;
	private TerminalRule tFALSE;
	private TerminalRule tAND;
	private TerminalRule tOR;
	private TerminalRule tNOT;
	private TerminalRule tIMPL;
	private TerminalRule tIFF;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AGCLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.aadl2.agcl.AGCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// This leads to a build-dependency cycle
	////import "platform:/resource/org.osate.xtext.aadl2.agcl.analysis/models/verifiers.ecore" as verifiers
	////import "http://verifiers/1.0" as verifiers
	//AGCLGrammarRoot:
	//	"library" lib=AGCLAnnexLibrary | "subclause" subclause=AGCLAnnexSubclause;
	public AGCLGrammarRootElements getAGCLGrammarRootAccess() {
		return (pAGCLGrammarRoot != null) ? pAGCLGrammarRoot : (pAGCLGrammarRoot = new AGCLGrammarRootElements());
	}
	
	public ParserRule getAGCLGrammarRootRule() {
		return getAGCLGrammarRootAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	AGCLAnnexLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return (pAnnexLibrary != null) ? pAnnexLibrary : (pAnnexLibrary = new AnnexLibraryElements());
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	////    AGCLTypeSubclause | AGCLImplSubclause
	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	AGCLAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return (pAnnexSubclause != null) ? pAnnexSubclause : (pAnnexSubclause = new AnnexSubclauseElements());
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//AGCLAnnexLibrary:
	//	{AGCLAnnexLibrary} (viewpoints+=AGCLViewpoint viewpoints+=AGCLViewpoint*)? (enforceclauses+=AGCLEnforce
	//	enforceclauses+=AGCLEnforce*)?;
	public AGCLAnnexLibraryElements getAGCLAnnexLibraryAccess() {
		return (pAGCLAnnexLibrary != null) ? pAGCLAnnexLibrary : (pAGCLAnnexLibrary = new AGCLAnnexLibraryElements());
	}
	
	public ParserRule getAGCLAnnexLibraryRule() {
		return getAGCLAnnexLibraryAccess().getRule();
	}

	//AGCLViewpoint:
	//	"viewpoint" name=ID ";";
	public AGCLViewpointElements getAGCLViewpointAccess() {
		return (pAGCLViewpoint != null) ? pAGCLViewpoint : (pAGCLViewpoint = new AGCLViewpointElements());
	}
	
	public ParserRule getAGCLViewpointRule() {
		return getAGCLViewpointAccess().getRule();
	}

	//AGCLEnforce:
	//	"enforce" name=ID ";";
	public AGCLEnforceElements getAGCLEnforceAccess() {
		return (pAGCLEnforce != null) ? pAGCLEnforce : (pAGCLEnforce = new AGCLEnforceElements());
	}
	
	public ParserRule getAGCLEnforceRule() {
		return getAGCLEnforceAccess().getRule();
	}

	//AGCLAnnexSubclause:
	//	{AGCLAnnexSubclause} (declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)? behaviour=AGCLBehaviour?
	//	(contracts+=AGCLContract contracts+=AGCLContract*)?;
	public AGCLAnnexSubclauseElements getAGCLAnnexSubclauseAccess() {
		return (pAGCLAnnexSubclause != null) ? pAGCLAnnexSubclause : (pAGCLAnnexSubclause = new AGCLAnnexSubclauseElements());
	}
	
	public ParserRule getAGCLAnnexSubclauseRule() {
		return getAGCLAnnexSubclauseAccess().getRule();
	}

	////AGCLAnnexSubclause returns AGCLAnnexSubclause:
	////    AGCLTypeSubclause | AGCLImplSubclause
	////;
	////AGCLAnnexSubclause returns AGCLAnnexSubclause:
	////    {AGCLAnnexSubclause}
	////    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
	////    ( contracts += AGCLContract (contracts += AGCLContract)* )?
	////;
	////AGCLTypeSubclause returns AGCLTypeSubclause:
	////    {AGCLTypeSubclause}
	////    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
	////    ( contracts += AGCLContract (contracts += AGCLContract)* )?
	////;
	////
	////AGCLImplSubclause returns AGCLImplSubclause:
	////    {AGCLImplSubclause}
	////    ( declarations += AGCLPropertyDecl (declarations += AGCLPropertyDecl)* )?
	////    ( behaviour = AGCLBehaviour )?
	////    ( contracts += AGCLContract (contracts += AGCLContract)* )?
	////;
	//AGCLContract:
	//	"contract" name=ID (declarations+=AGCLPropertyDecl declarations+=AGCLPropertyDecl*)? assumption=AGCLAssumption
	//	guarantee=AGCLGuarantee "end" ename=ID ";";
	public AGCLContractElements getAGCLContractAccess() {
		return (pAGCLContract != null) ? pAGCLContract : (pAGCLContract = new AGCLContractElements());
	}
	
	public ParserRule getAGCLContractRule() {
		return getAGCLContractAccess().getRule();
	}

	//AGCLPropertyDecl:
	//	"property" name=ID ("(" params+=Parameter ("," params+=Parameter)* ")")? "=" spec=PSLSpec ";";
	public AGCLPropertyDeclElements getAGCLPropertyDeclAccess() {
		return (pAGCLPropertyDecl != null) ? pAGCLPropertyDecl : (pAGCLPropertyDecl = new AGCLPropertyDeclElements());
	}
	
	public ParserRule getAGCLPropertyDeclRule() {
		return getAGCLPropertyDeclAccess().getRule();
	}

	//AGCLAssumption:
	//	"assumption" spec=PSLSpec ";";
	public AGCLAssumptionElements getAGCLAssumptionAccess() {
		return (pAGCLAssumption != null) ? pAGCLAssumption : (pAGCLAssumption = new AGCLAssumptionElements());
	}
	
	public ParserRule getAGCLAssumptionRule() {
		return getAGCLAssumptionAccess().getRule();
	}

	//AGCLGuarantee:
	//	"guarantee" spec=PSLSpec ";";
	public AGCLGuaranteeElements getAGCLGuaranteeAccess() {
		return (pAGCLGuarantee != null) ? pAGCLGuarantee : (pAGCLGuarantee = new AGCLGuaranteeElements());
	}
	
	public ParserRule getAGCLGuaranteeRule() {
		return getAGCLGuaranteeAccess().getRule();
	}

	//AGCLBehaviour:
	//	("behaviour" | "behavior") spec=PSLSpec ";";
	public AGCLBehaviourElements getAGCLBehaviourAccess() {
		return (pAGCLBehaviour != null) ? pAGCLBehaviour : (pAGCLBehaviour = new AGCLBehaviourElements());
	}
	
	public ParserRule getAGCLBehaviourRule() {
		return getAGCLBehaviourAccess().getRule();
	}

	//// This leads to a build-dependency cycle
	////PSLSpecification returns verifiers::Specification:
	////    PSLSpec
	////;
	//PSLSpec:
	//	"psl"? formula=PSLFormula;
	public PSLSpecElements getPSLSpecAccess() {
		return (pPSLSpec != null) ? pPSLSpec : (pPSLSpec = new PSLSpecElements());
	}
	
	public ParserRule getPSLSpecRule() {
		return getPSLSpecAccess().getRule();
	}

	//PSLFormula:
	//	PSLBooleanExpression;
	public PSLFormulaElements getPSLFormulaAccess() {
		return (pPSLFormula != null) ? pPSLFormula : (pPSLFormula = new PSLFormulaElements());
	}
	
	public ParserRule getPSLFormulaRule() {
		return getPSLFormulaAccess().getRule();
	}

	//PSLBooleanExpression:
	//	PSLDisjunction;
	public PSLBooleanExpressionElements getPSLBooleanExpressionAccess() {
		return (pPSLBooleanExpression != null) ? pPSLBooleanExpression : (pPSLBooleanExpression = new PSLBooleanExpressionElements());
	}
	
	public ParserRule getPSLBooleanExpressionRule() {
		return getPSLBooleanExpressionAccess().getRule();
	}

	//BooleanConstant:
	//	{BooleanConstant} val=TRUE | val=FALSE;
	public BooleanConstantElements getBooleanConstantAccess() {
		return (pBooleanConstant != null) ? pBooleanConstant : (pBooleanConstant = new BooleanConstantElements());
	}
	
	public ParserRule getBooleanConstantRule() {
		return getBooleanConstantAccess().getRule();
	}

	//AtomicProp:
	//	Var | Input | Output;
	public AtomicPropElements getAtomicPropAccess() {
		return (pAtomicProp != null) ? pAtomicProp : (pAtomicProp = new AtomicPropElements());
	}
	
	public ParserRule getAtomicPropRule() {
		return getAtomicPropAccess().getRule();
	}

	//Var:
	//	name=ID;
	public VarElements getVarAccess() {
		return (pVar != null) ? pVar : (pVar = new VarElements());
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Input:
	//	"in" link=ID (":" event=ID)?;
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output:
	//	"out" link=ID (":" event=ID)?;
	public OutputElements getOutputAccess() {
		return (pOutput != null) ? pOutput : (pOutput = new OutputElements());
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//PSLDisjunction:
	//	terms+=PSLConjunction (OR terms+=PSLConjunction)*;
	public PSLDisjunctionElements getPSLDisjunctionAccess() {
		return (pPSLDisjunction != null) ? pPSLDisjunction : (pPSLDisjunction = new PSLDisjunctionElements());
	}
	
	public ParserRule getPSLDisjunctionRule() {
		return getPSLDisjunctionAccess().getRule();
	}

	//PSLConjunction:
	//	factors+=PSLAtom (AND factors+=PSLAtom)*;
	public PSLConjunctionElements getPSLConjunctionAccess() {
		return (pPSLConjunction != null) ? pPSLConjunction : (pPSLConjunction = new PSLConjunctionElements());
	}
	
	public ParserRule getPSLConjunctionRule() {
		return getPSLConjunctionAccess().getRule();
	}

	//PSLAtom:
	//	BooleanConstant | AtomicProp | PSLNegation | "(" PSLBooleanExpression ")";
	public PSLAtomElements getPSLAtomAccess() {
		return (pPSLAtom != null) ? pPSLAtom : (pPSLAtom = new PSLAtomElements());
	}
	
	public ParserRule getPSLAtomRule() {
		return getPSLAtomAccess().getRule();
	}

	//PSLNegation:
	//	NOT PSLBooleanExpression;
	public PSLNegationElements getPSLNegationAccess() {
		return (pPSLNegation != null) ? pPSLNegation : (pPSLNegation = new PSLNegationElements());
	}
	
	public ParserRule getPSLNegationRule() {
		return getPSLNegationAccess().getRule();
	}

	//Parameter:
	//	ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	////EString returns ecore::EString:
	////    STRING | ID;
	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal TRUE:
	//	"T" | "true" | "1";
	public TerminalRule getTRUERule() {
		return (tTRUE != null) ? tTRUE : (tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRUE"));
	} 

	//terminal FALSE:
	//	"F" | "false" | "0";
	public TerminalRule getFALSERule() {
		return (tFALSE != null) ? tFALSE : (tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FALSE"));
	} 

	//terminal AND:
	//	"&&" | "&" | "and";
	public TerminalRule getANDRule() {
		return (tAND != null) ? tAND : (tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND"));
	} 

	//terminal OR:
	//	"||" | "|" | "or";
	public TerminalRule getORRule() {
		return (tOR != null) ? tOR : (tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR"));
	} 

	//terminal NOT:
	//	"!" | "not";
	public TerminalRule getNOTRule() {
		return (tNOT != null) ? tNOT : (tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT"));
	} 

	//terminal IMPL:
	//	"->";
	public TerminalRule getIMPLRule() {
		return (tIMPL != null) ? tIMPL : (tIMPL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IMPL"));
	} 

	//terminal IFF:
	//	"<->";
	public TerminalRule getIFFRule() {
		return (tIFF != null) ? tIFF : (tIFF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFF"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
