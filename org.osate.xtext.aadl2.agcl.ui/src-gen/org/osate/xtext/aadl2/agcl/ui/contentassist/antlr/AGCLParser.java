/*
* generated by Xtext
*/
package org.osate.xtext.aadl2.agcl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.osate.xtext.aadl2.agcl.services.AGCLGrammarAccess;

public class AGCLParser extends AbstractContentAssistParser {
	
	@Inject
	private AGCLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.osate.xtext.aadl2.agcl.ui.contentassist.antlr.internal.InternalAGCLParser createParser() {
		org.osate.xtext.aadl2.agcl.ui.contentassist.antlr.internal.InternalAGCLParser result = new org.osate.xtext.aadl2.agcl.ui.contentassist.antlr.internal.InternalAGCLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAGCLGrammarRootAccess().getAlternatives(), "rule__AGCLGrammarRoot__Alternatives");
					put(grammarAccess.getAGCLBehaviourAccess().getAlternatives_0(), "rule__AGCLBehaviour__Alternatives_0");
					put(grammarAccess.getPSLExpressionAccess().getAlternatives_1(), "rule__PSLExpression__Alternatives_1");
					put(grammarAccess.getBooleanConstantAccess().getAlternatives(), "rule__BooleanConstant__Alternatives");
					put(grammarAccess.getAtomicPropAccess().getAlternatives(), "rule__AtomicProp__Alternatives");
					put(grammarAccess.getPSLAtomAccess().getAlternatives(), "rule__PSLAtom__Alternatives");
					put(grammarAccess.getAGCLGrammarRootAccess().getGroup_0(), "rule__AGCLGrammarRoot__Group_0__0");
					put(grammarAccess.getAGCLGrammarRootAccess().getGroup_1(), "rule__AGCLGrammarRoot__Group_1__0");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getGroup(), "rule__AGCLAnnexLibrary__Group__0");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getGroup_1(), "rule__AGCLAnnexLibrary__Group_1__0");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getGroup_2(), "rule__AGCLAnnexLibrary__Group_2__0");
					put(grammarAccess.getAGCLViewpointAccess().getGroup(), "rule__AGCLViewpoint__Group__0");
					put(grammarAccess.getAGCLEnforceAccess().getGroup(), "rule__AGCLEnforce__Group__0");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getGroup(), "rule__AGCLAnnexSubclause__Group__0");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getGroup_1(), "rule__AGCLAnnexSubclause__Group_1__0");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getGroup_3(), "rule__AGCLAnnexSubclause__Group_3__0");
					put(grammarAccess.getAGCLContractAccess().getGroup(), "rule__AGCLContract__Group__0");
					put(grammarAccess.getAGCLContractAccess().getGroup_2(), "rule__AGCLContract__Group_2__0");
					put(grammarAccess.getAGCLPropertyDeclAccess().getGroup(), "rule__AGCLPropertyDecl__Group__0");
					put(grammarAccess.getAGCLPropertyDeclAccess().getGroup_2(), "rule__AGCLPropertyDecl__Group_2__0");
					put(grammarAccess.getAGCLPropertyDeclAccess().getGroup_2_2(), "rule__AGCLPropertyDecl__Group_2_2__0");
					put(grammarAccess.getAGCLAssumptionAccess().getGroup(), "rule__AGCLAssumption__Group__0");
					put(grammarAccess.getAGCLGuaranteeAccess().getGroup(), "rule__AGCLGuarantee__Group__0");
					put(grammarAccess.getAGCLBehaviourAccess().getGroup(), "rule__AGCLBehaviour__Group__0");
					put(grammarAccess.getPSLSpecAccess().getGroup(), "rule__PSLSpec__Group__0");
					put(grammarAccess.getPSLExpressionAccess().getGroup(), "rule__PSLExpression__Group__0");
					put(grammarAccess.getPSLExpressionAccess().getGroup_1_0(), "rule__PSLExpression__Group_1_0__0");
					put(grammarAccess.getPSLExpressionAccess().getGroup_1_1(), "rule__PSLExpression__Group_1_1__0");
					put(grammarAccess.getBooleanConstantAccess().getGroup_0(), "rule__BooleanConstant__Group_0__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInputAccess().getGroup_2(), "rule__Input__Group_2__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getOutputAccess().getGroup_2(), "rule__Output__Group_2__0");
					put(grammarAccess.getPSLDisjunctionAccess().getGroup(), "rule__PSLDisjunction__Group__0");
					put(grammarAccess.getPSLDisjunctionAccess().getGroup_1(), "rule__PSLDisjunction__Group_1__0");
					put(grammarAccess.getPSLConjunctionAccess().getGroup(), "rule__PSLConjunction__Group__0");
					put(grammarAccess.getPSLConjunctionAccess().getGroup_1(), "rule__PSLConjunction__Group_1__0");
					put(grammarAccess.getPSLAtomAccess().getGroup_3(), "rule__PSLAtom__Group_3__0");
					put(grammarAccess.getPSLNegationAccess().getGroup(), "rule__PSLNegation__Group__0");
					put(grammarAccess.getAGCLGrammarRootAccess().getLibAssignment_0_1(), "rule__AGCLGrammarRoot__LibAssignment_0_1");
					put(grammarAccess.getAGCLGrammarRootAccess().getSubclauseAssignment_1_1(), "rule__AGCLGrammarRoot__SubclauseAssignment_1_1");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getViewpointsAssignment_1_0(), "rule__AGCLAnnexLibrary__ViewpointsAssignment_1_0");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getViewpointsAssignment_1_1(), "rule__AGCLAnnexLibrary__ViewpointsAssignment_1_1");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getEnforceclausesAssignment_2_0(), "rule__AGCLAnnexLibrary__EnforceclausesAssignment_2_0");
					put(grammarAccess.getAGCLAnnexLibraryAccess().getEnforceclausesAssignment_2_1(), "rule__AGCLAnnexLibrary__EnforceclausesAssignment_2_1");
					put(grammarAccess.getAGCLViewpointAccess().getNameAssignment_1(), "rule__AGCLViewpoint__NameAssignment_1");
					put(grammarAccess.getAGCLEnforceAccess().getNameAssignment_1(), "rule__AGCLEnforce__NameAssignment_1");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getDeclarationsAssignment_1_0(), "rule__AGCLAnnexSubclause__DeclarationsAssignment_1_0");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getDeclarationsAssignment_1_1(), "rule__AGCLAnnexSubclause__DeclarationsAssignment_1_1");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getBehaviourAssignment_2(), "rule__AGCLAnnexSubclause__BehaviourAssignment_2");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getContractsAssignment_3_0(), "rule__AGCLAnnexSubclause__ContractsAssignment_3_0");
					put(grammarAccess.getAGCLAnnexSubclauseAccess().getContractsAssignment_3_1(), "rule__AGCLAnnexSubclause__ContractsAssignment_3_1");
					put(grammarAccess.getAGCLContractAccess().getNameAssignment_1(), "rule__AGCLContract__NameAssignment_1");
					put(grammarAccess.getAGCLContractAccess().getDeclarationsAssignment_2_0(), "rule__AGCLContract__DeclarationsAssignment_2_0");
					put(grammarAccess.getAGCLContractAccess().getDeclarationsAssignment_2_1(), "rule__AGCLContract__DeclarationsAssignment_2_1");
					put(grammarAccess.getAGCLContractAccess().getAssumptionAssignment_3(), "rule__AGCLContract__AssumptionAssignment_3");
					put(grammarAccess.getAGCLContractAccess().getGuaranteeAssignment_4(), "rule__AGCLContract__GuaranteeAssignment_4");
					put(grammarAccess.getAGCLContractAccess().getEnameAssignment_6(), "rule__AGCLContract__EnameAssignment_6");
					put(grammarAccess.getAGCLPropertyDeclAccess().getNameAssignment_1(), "rule__AGCLPropertyDecl__NameAssignment_1");
					put(grammarAccess.getAGCLPropertyDeclAccess().getParamsAssignment_2_1(), "rule__AGCLPropertyDecl__ParamsAssignment_2_1");
					put(grammarAccess.getAGCLPropertyDeclAccess().getParamsAssignment_2_2_1(), "rule__AGCLPropertyDecl__ParamsAssignment_2_2_1");
					put(grammarAccess.getAGCLPropertyDeclAccess().getSpecAssignment_4(), "rule__AGCLPropertyDecl__SpecAssignment_4");
					put(grammarAccess.getAGCLAssumptionAccess().getSpecAssignment_1(), "rule__AGCLAssumption__SpecAssignment_1");
					put(grammarAccess.getAGCLGuaranteeAccess().getSpecAssignment_1(), "rule__AGCLGuarantee__SpecAssignment_1");
					put(grammarAccess.getAGCLBehaviourAccess().getSpecAssignment_1(), "rule__AGCLBehaviour__SpecAssignment_1");
					put(grammarAccess.getPSLSpecAccess().getExprAssignment_1(), "rule__PSLSpec__ExprAssignment_1");
					put(grammarAccess.getPSLExpressionAccess().getConditionAssignment_0(), "rule__PSLExpression__ConditionAssignment_0");
					put(grammarAccess.getPSLExpressionAccess().getImplicationAssignment_1_0_0(), "rule__PSLExpression__ImplicationAssignment_1_0_0");
					put(grammarAccess.getPSLExpressionAccess().getConclusionAssignment_1_0_1(), "rule__PSLExpression__ConclusionAssignment_1_0_1");
					put(grammarAccess.getPSLExpressionAccess().getBiconditionalAssignment_1_1_0(), "rule__PSLExpression__BiconditionalAssignment_1_1_0");
					put(grammarAccess.getPSLExpressionAccess().getOtherAssignment_1_1_1(), "rule__PSLExpression__OtherAssignment_1_1_1");
					put(grammarAccess.getBooleanConstantAccess().getValAssignment_0_1(), "rule__BooleanConstant__ValAssignment_0_1");
					put(grammarAccess.getBooleanConstantAccess().getValAssignment_1(), "rule__BooleanConstant__ValAssignment_1");
					put(grammarAccess.getVarAccess().getNameAssignment(), "rule__Var__NameAssignment");
					put(grammarAccess.getInputAccess().getLinkAssignment_1(), "rule__Input__LinkAssignment_1");
					put(grammarAccess.getInputAccess().getEventAssignment_2_1(), "rule__Input__EventAssignment_2_1");
					put(grammarAccess.getOutputAccess().getLinkAssignment_1(), "rule__Output__LinkAssignment_1");
					put(grammarAccess.getOutputAccess().getEventAssignment_2_1(), "rule__Output__EventAssignment_2_1");
					put(grammarAccess.getPSLDisjunctionAccess().getTermsAssignment_0(), "rule__PSLDisjunction__TermsAssignment_0");
					put(grammarAccess.getPSLDisjunctionAccess().getTermsAssignment_1_1(), "rule__PSLDisjunction__TermsAssignment_1_1");
					put(grammarAccess.getPSLConjunctionAccess().getFactorsAssignment_0(), "rule__PSLConjunction__FactorsAssignment_0");
					put(grammarAccess.getPSLConjunctionAccess().getFactorsAssignment_1_1(), "rule__PSLConjunction__FactorsAssignment_1_1");
					put(grammarAccess.getPSLNegationAccess().getNegatedAssignment_1(), "rule__PSLNegation__NegatedAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.osate.xtext.aadl2.agcl.ui.contentassist.antlr.internal.InternalAGCLParser typedParser = (org.osate.xtext.aadl2.agcl.ui.contentassist.antlr.internal.InternalAGCLParser) parser;
			typedParser.entryRuleAGCLGrammarRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AGCLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AGCLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
